def output_random_triples(cond):
  # naming as in Damgard et al
  y, r, w = sint.get_random_triple()
  outp = [y, r, w]
  output_shares(2,*outp)
  v, un1, un2 = sint.get_random_triple()
  u = v * r
  outp2 = [v, u]
  output_shares(2,*outp2)
  return cond - 1 

open_channel(0)
open_channel(1)

n = regint.public_input(1)
print_ln("Dataset size %s", n)

open_channel(2)

do_loop(n, output_random_triples)

open_channel(3) # construct triples
open_channel(4) # get data

def import_data(cond):
  # naming as in Damgard et al
  y = sint.public_input(1000)
  print_ln("Data imported: %s", y)
  return cond + 1 

while_loop(import_data, lambda x: x<n, 0)


close_channel(0)
close_channel(1)
close_channel(2)
close_channel(3)
close_channel(4)
